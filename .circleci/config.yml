# PHP CircleCI 2.0 configuration file
#
# Check https://circleci.com/docs/2.0/language-php/ for more details
#
version: 2
jobs:
  build:
    docker:
      - image: circleci/php:latest
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: sudo apt-get update
      - run: sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo pecl install zip && sudo docker-php-ext-enable zip
      - run: composer install -n --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: echo "BUILD COMPLETE"

  run_unit_tests:
    docker:
      - image: circleci/php:latest
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: sudo apt-get update
      - run: sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo pecl install zip && sudo docker-php-ext-enable zip
      - run: composer install -n --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: bin/phpunit

  run_functional_tests:
    docker:
      - image: circleci/php:latest
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: sudo apt-get update
      - run: sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo pecl install zip && sudo docker-php-ext-enable zip
      - run: composer install -n --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: bin/phpunit

  run_acceptance_tests:
    docker:
      - image: circleci/php:latest
    working_directory: ~/repo
    steps:
      - checkout
      - restore_cache:
          keys:
          - v1-dependencies-{{ checksum "composer.json" }}
          # fallback to using the latest cache if no exact match is found
          - v1-dependencies-
      - run: sudo apt-get update
      - run: sudo apt-get install libzip-dev libwebp-dev libjpeg-dev libpng-dev libz-dev libxpm-dev libmcrypt-dev
      - run: sudo pecl channel-update pecl.php.net
      - run: sudo pecl install zip && sudo docker-php-ext-enable zip
      - run: composer install -n --prefer-dist
      - save_cache:
          paths:
            - ./vendor
          key: v1-dependencies-{{ checksum "composer.json" }}
      - run: bin/phpunit

  deployment:
    docker:
      - image: circleci/php:latest
    working_directory: ~/repo
    steps:
      - run: echo "deploying master branch"
      - run: ssh -v $DROPLET_USER@$DROPLET_IP "cd /srv; ./circle_deployer.sh"

workflows:
  version: 2
  build_test_and_deploy:
    jobs:
      - build
      - hold:
        type: approval
        requires:
          - build
      - deployment:
        requires:
          - hold
#workflows:
#  version: 2
#  build_test_and_deploy:
#    jobs:
#      - build
#      - run_unit_tests:
#        requires:
#          - build
#      - run_functional_tests:
#        requires:
#          - build
#      - run_acceptance_tests:
#        requires:
#          - build
#      - hold:
#        type: approval
#        requires:
#          - run_unit_tests
#          - run_functional_tests
#          - run_acceptance_tests
#      - deployment:
#        requires:
#          - hold
